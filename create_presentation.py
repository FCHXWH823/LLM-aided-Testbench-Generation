"""
Script to create a PowerPoint presentation for the LLM-aided Testbench Generation project.
"""

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor

def add_title_slide(prs, title, subtitle):
    """Add a title slide."""
    slide_layout = prs.slide_layouts[0]  # Title slide layout
    slide = prs.slides.add_slide(slide_layout)
    
    title_shape = slide.shapes.title
    subtitle_shape = slide.placeholders[1]
    
    title_shape.text = title
    subtitle_shape.text = subtitle
    
    # Format title
    title_frame = title_shape.text_frame
    title_para = title_frame.paragraphs[0]
    title_para.font.size = Pt(44)
    title_para.font.bold = True
    title_para.font.color.rgb = RGBColor(0, 51, 102)
    
    return slide

def add_content_slide(prs, title, content_items):
    """Add a content slide with bullet points."""
    slide_layout = prs.slide_layouts[1]  # Title and content layout
    slide = prs.slides.add_slide(slide_layout)
    
    title_shape = slide.shapes.title
    title_shape.text = title
    
    # Format title
    title_frame = title_shape.text_frame
    title_para = title_frame.paragraphs[0]
    title_para.font.size = Pt(32)
    title_para.font.bold = True
    title_para.font.color.rgb = RGBColor(0, 51, 102)
    
    # Add content
    body_shape = slide.placeholders[1]
    text_frame = body_shape.text_frame
    text_frame.clear()
    
    for i, item in enumerate(content_items):
        if i == 0:
            p = text_frame.paragraphs[0]
        else:
            p = text_frame.add_paragraph()
        
        # Handle nested lists (tuple format: (level, text))
        if isinstance(item, tuple):
            level, text = item
            p.level = level
            p.text = text
        else:
            p.text = item
        
        p.font.size = Pt(18)
        p.space_after = Pt(12)
    
    return slide

def add_diagram_slide(prs, title, diagram_description):
    """Add a slide with a diagram/flowchart description."""
    slide_layout = prs.slide_layouts[5]  # Blank layout for custom content
    slide = prs.slides.add_slide(slide_layout)
    
    # Add title
    left = Inches(0.5)
    top = Inches(0.3)
    width = Inches(9)
    height = Inches(0.8)
    title_box = slide.shapes.add_textbox(left, top, width, height)
    title_frame = title_box.text_frame
    title_para = title_frame.paragraphs[0]
    title_para.text = title
    title_para.font.size = Pt(32)
    title_para.font.bold = True
    title_para.font.color.rgb = RGBColor(0, 51, 102)
    
    # Add diagram boxes
    for item in diagram_description:
        if item['type'] == 'box':
            shape = slide.shapes.add_shape(
                1,  # Rectangle
                Inches(item['left']),
                Inches(item['top']),
                Inches(item['width']),
                Inches(item['height'])
            )
            shape.fill.solid()
            shape.fill.fore_color.rgb = RGBColor(*item.get('color', (173, 216, 230)))
            shape.line.color.rgb = RGBColor(0, 51, 102)
            shape.line.width = Pt(2)
            
            text_frame = shape.text_frame
            text_frame.word_wrap = True
            p = text_frame.paragraphs[0]
            p.text = item['text']
            p.font.size = Pt(item.get('font_size', 14))
            p.font.bold = item.get('bold', False)
            p.alignment = PP_ALIGN.CENTER
            text_frame.vertical_anchor = 1  # Middle
        
        elif item['type'] == 'arrow':
            line = slide.shapes.add_connector(
                2,  # Straight connector
                Inches(item['x1']),
                Inches(item['y1']),
                Inches(item['x2']),
                Inches(item['y2'])
            )
            line.line.color.rgb = RGBColor(0, 51, 102)
            line.line.width = Pt(2)
        
        elif item['type'] == 'text':
            text_box = slide.shapes.add_textbox(
                Inches(item['left']),
                Inches(item['top']),
                Inches(item['width']),
                Inches(item['height'])
            )
            text_frame = text_box.text_frame
            p = text_frame.paragraphs[0]
            p.text = item['text']
            p.font.size = Pt(item.get('font_size', 12))
            p.font.italic = item.get('italic', False)
    
    return slide

def create_presentation():
    """Create the complete PowerPoint presentation."""
    prs = Presentation()
    prs.slide_width = Inches(10)
    prs.slide_height = Inches(7.5)
    
    # Slide 1: Title Slide
    add_title_slide(
        prs,
        "LLM-aided Testbench Generation",
        "Automated Verilog Testbench Generation with Golden Reference Models"
    )
    
    # Slide 2: Project Overview
    add_content_slide(
        prs,
        "Project Overview",
        [
            "üéØ Automated testbench generation for Verilog modules",
            "ü§ñ Leverages Large Language Models (LLMs) for intelligent code generation",
            "‚úÖ Creates comprehensive test patterns with verification logic",
            "üîç Generates Python golden reference models for expected outputs",
            "‚ö° Streamlines hardware verification workflow",
            "",
            "Key Benefits:",
            (1, "Reduces manual testbench writing effort"),
            (1, "Ensures comprehensive test coverage"),
            (1, "Provides automatic pass/fail verification"),
            (1, "Supports combinational and sequential logic")
        ]
    )
    
    # Slide 3: Framework Inputs and Outputs
    add_content_slide(
        prs,
        "Testbench Generation Framework: Inputs & Outputs",
        [
            "üì• INPUTS:",
            (1, "Natural Language Description"),
            (2, "Text file describing module functionality"),
            (2, "Input/output specifications"),
            (2, "Expected behavior details"),
            (1, "Verilog Module Code"),
            (2, "The actual HDL implementation to be tested"),
            (2, "May contain bugs to be detected"),
            "",
            "üì§ OUTPUTS:",
            (1, "testbench_initial.v - Testbench with test patterns"),
            (1, "golden_model.py - Python reference implementation"),
            (1, "test_patterns_with_golden.json - Test data with expected outputs"),
            (1, "testbench_final.v - Complete testbench with verification logic")
        ]
    )
    
    # Slide 4: 5-Step Pipeline Workflow
    pipeline_diagram = [
        {'type': 'box', 'left': 1, 'top': 1.2, 'width': 3.5, 'height': 0.6,
         'text': 'Step 1-2: Input Handling', 'color': (255, 200, 200), 'bold': True, 'font_size': 14},
        {'type': 'box', 'left': 5, 'top': 1.2, 'width': 4, 'height': 0.6,
         'text': 'Natural Language Description + Verilog Code', 'color': (255, 230, 230), 'font_size': 12},
        
        {'type': 'arrow', 'x1': 2.75, 'y1': 1.8, 'x2': 2.75, 'y2': 2.3},
        
        {'type': 'box', 'left': 1, 'top': 2.3, 'width': 3.5, 'height': 0.6,
         'text': 'Step 3: LLM Testbench Generation', 'color': (200, 255, 200), 'bold': True, 'font_size': 14},
        {'type': 'box', 'left': 5, 'top': 2.3, 'width': 4, 'height': 0.6,
         'text': 'Generate comprehensive test patterns', 'color': (230, 255, 230), 'font_size': 12},
        
        {'type': 'arrow', 'x1': 2.75, 'y1': 2.9, 'x2': 2.75, 'y2': 3.4},
        
        {'type': 'box', 'left': 1, 'top': 3.4, 'width': 3.5, 'height': 0.6,
         'text': 'Step 4: Golden Model Generation', 'color': (200, 200, 255), 'bold': True, 'font_size': 14},
        {'type': 'box', 'left': 5, 'top': 3.4, 'width': 4, 'height': 0.6,
         'text': 'Python model + Expected outputs', 'color': (230, 230, 255), 'font_size': 12},
        
        {'type': 'arrow', 'x1': 2.75, 'y1': 4.0, 'x2': 2.75, 'y2': 4.5},
        
        {'type': 'box', 'left': 1, 'top': 4.5, 'width': 3.5, 'height': 0.6,
         'text': 'Step 5: Testbench Update', 'color': (255, 255, 200), 'bold': True, 'font_size': 14},
        {'type': 'box', 'left': 5, 'top': 4.5, 'width': 4, 'height': 0.6,
         'text': 'Add verification logic & assertions', 'color': (255, 255, 230), 'font_size': 12},
        
        {'type': 'arrow', 'x1': 2.75, 'y1': 5.1, 'x2': 2.75, 'y2': 5.6},
        
        {'type': 'box', 'left': 1, 'top': 5.6, 'width': 3.5, 'height': 0.7,
         'text': '‚úÖ Final Testbench Ready', 'color': (200, 255, 255), 'bold': True, 'font_size': 16},
    ]
    
    add_diagram_slide(prs, "5-Step Pipeline Workflow", pipeline_diagram)
    
    # Slide 5: Step 3 - Testbench Generation Details
    add_content_slide(
        prs,
        "Step 3: LLM-Powered Testbench Generation",
        [
            "üìù Process:",
            (1, "Extracts module information (name, inputs, outputs)"),
            (1, "LLM generates comprehensive test patterns covering:"),
            (2, "Corner cases (all 0s, all 1s)"),
            (2, "Boundary values"),
            (2, "Typical use cases"),
            (2, "Random test patterns"),
            (1, "Creates Verilog testbench skeleton"),
            "",
            "üìÑ Output: testbench_initial.v",
            (1, "Signal declarations"),
            (1, "Module instantiation"),
            (1, "Test pattern application"),
            (1, "Basic $display statements"),
            (1, "‚ö†Ô∏è Does NOT contain expected outputs yet")
        ]
    )
    
    # Slide 6: Step 4 - Golden Model Generation
    add_content_slide(
        prs,
        "Step 4: Golden Model Generation",
        [
            "üêç Python Golden Reference Model:",
            (1, "LLM converts natural language description to Python code"),
            (1, "Implements expected module functionality"),
            (1, "Independent verification reference"),
            "",
            "üîÑ Golden Output Computation:",
            (1, "All test patterns executed through Python model"),
            (1, "Expected outputs computed and saved"),
            (1, "Results stored in JSON format"),
            "",
            "üìÑ Outputs:",
            (1, "golden_model.py - Python implementation"),
            (1, "test_patterns_with_golden.json - Test data with expected results")
        ]
    )
    
    # Slide 7: Step 5 - Testbench Update
    add_content_slide(
        prs,
        "Step 5: Testbench Enhancement with Verification",
        [
            "‚ú® Testbench Enhancement:",
            (1, "Injects expected outputs from golden model"),
            (1, "Adds verification logic for each test case"),
            (1, "Implements pass/fail tracking"),
            (1, "Generates comprehensive test summary"),
            "",
            "‚úÖ Verification Features:",
            (1, "Automatic comparison of actual vs expected outputs"),
            (1, "Detailed error reporting for failures"),
            (1, "Test statistics (total, passed, failed)"),
            (1, "Color-coded output for easy debugging"),
            "",
            "üìÑ Output: testbench_final.v",
            (1, "Production-ready testbench with full verification")
        ]
    )
    
    # Slide 8: Iverilog-based Evaluation Framework
    evaluation_diagram = [
        {'type': 'box', 'left': 0.5, 'top': 1.5, 'width': 2.8, 'height': 0.7,
         'text': 'Verilog Module\n(Design Under Test)', 'color': (255, 200, 200), 'bold': True, 'font_size': 14},
        
        {'type': 'box', 'left': 3.8, 'top': 1.5, 'width': 2.8, 'height': 0.7,
         'text': 'testbench_final.v\n(Generated Testbench)', 'color': (200, 255, 200), 'bold': True, 'font_size': 14},
        
        {'type': 'arrow', 'x1': 3.3, 'y1': 1.85, 'x2': 3.8, 'y2': 1.85},
        {'type': 'arrow', 'x1': 1.9, 'y1': 2.2, 'x2': 2.8, 'y2': 2.8},
        {'type': 'arrow', 'x1': 5.2, 'y1': 2.2, 'x2': 4.3, 'y2': 2.8},
        
        {'type': 'box', 'left': 2.3, 'top': 2.8, 'width': 2.5, 'height': 0.6,
         'text': 'iverilog Compiler', 'color': (173, 216, 230), 'bold': True, 'font_size': 14},
        
        {'type': 'text', 'left': 7, 'top': 2.9, 'width': 2.5, 'height': 0.5,
         'text': 'iverilog -g2012 -o out.vvp\n  module.v testbench.v', 'font_size': 10, 'italic': True},
        
        {'type': 'arrow', 'x1': 3.55, 'y1': 3.4, 'x2': 3.55, 'y2': 3.9},
        
        {'type': 'box', 'left': 2.3, 'top': 3.9, 'width': 2.5, 'height': 0.6,
         'text': 'out.vvp\n(Compiled Binary)', 'color': (255, 255, 200), 'font_size': 13},
        
        {'type': 'arrow', 'x1': 3.55, 'y1': 4.5, 'x2': 3.55, 'y2': 5.0},
        
        {'type': 'box', 'left': 2.3, 'top': 5.0, 'width': 2.5, 'height': 0.6,
         'text': 'vvp Simulator', 'color': (173, 216, 230), 'bold': True, 'font_size': 14},
        
        {'type': 'text', 'left': 7, 'top': 5.1, 'width': 2.5, 'height': 0.5,
         'text': 'vvp out.vvp', 'font_size': 10, 'italic': True},
        
        {'type': 'arrow', 'x1': 3.55, 'y1': 5.6, 'x2': 3.55, 'y2': 6.1},
        
        {'type': 'box', 'left': 1.8, 'top': 6.1, 'width': 3.5, 'height': 0.7,
         'text': 'üìä Simulation Results\nTest Summary (Pass/Fail)', 'color': (200, 255, 200), 'bold': True, 'font_size': 14},
    ]
    
    add_diagram_slide(prs, "Iverilog-based Evaluation Framework", evaluation_diagram)
    
    # Slide 9: Evaluation Framework Details
    add_content_slide(
        prs,
        "Iverilog Evaluation Framework Details",
        [
            "üîß Compilation Phase:",
            (1, "Command: iverilog -g2012 -o out.vvp <module.v> <testbench_final.v>"),
            (1, "Compiles both design and testbench"),
            (1, "Supports SystemVerilog 2012 features"),
            (1, "Generates executable simulation binary"),
            "",
            "‚ñ∂Ô∏è Simulation Phase:",
            (1, "Command: vvp out.vvp"),
            (1, "Runs all test patterns"),
            (1, "Compares actual vs expected outputs"),
            (1, "Reports pass/fail for each test case"),
            "",
            "üìà Result Analysis:",
            (1, "Test summary with statistics"),
            (1, "Detailed output for debugging failures"),
            (1, "Automatic bug detection in design")
        ]
    )
    
    # Slide 10: Example Demonstration
    add_content_slide(
        prs,
        "Example: 2-to-1 Multiplexer",
        [
            "üì• Input Description:",
            (1, '"A 2-to-1 multiplexer with inputs a, b, sel and output y"'),
            (1, '"When sel=0, output y=a; When sel=1, output y=b"'),
            "",
            "üíª Verilog Module:",
            (1, 'module mux2to1(input a, b, sel, output y);'),
            (2, 'assign y = sel ? b : a;'),
            (1, 'endmodule'),
            "",
            "‚úÖ Generated Test Coverage:",
            (1, "8 comprehensive test patterns"),
            (1, "All input combinations (2¬≥ = 8 cases)"),
            (1, "Automatic verification of each case"),
            (1, "100% functional coverage achieved")
        ]
    )
    
    # Slide 11: Usage Workflow
    add_content_slide(
        prs,
        "Complete Usage Workflow",
        [
            "1Ô∏è‚É£ Prepare Inputs:",
            (1, "Write natural language description"),
            (1, "Provide Verilog module to test"),
            "",
            "2Ô∏è‚É£ Run Generation:",
            (1, "python main.py --description desc.txt --verilog module.v"),
            (1, "Framework generates all artifacts automatically"),
            "",
            "3Ô∏è‚É£ Compile & Simulate:",
            (1, "iverilog -g2012 -o sim.vvp module.v testbench_final.v"),
            (1, "vvp sim.vvp"),
            "",
            "4Ô∏è‚É£ Review Results:",
            (1, "Check test summary"),
            (1, "Debug any failures"),
            (1, "Verify design correctness")
        ]
    )
    
    # Slide 12: Key Features & Benefits
    add_content_slide(
        prs,
        "Key Features & Benefits",
        [
            "‚ú® Automation:",
            (1, "Eliminates manual testbench writing"),
            (1, "Reduces verification time by 80%+"),
            "",
            "üéØ Comprehensive Testing:",
            (1, "Corner cases, boundary values, typical cases"),
            (1, "Intelligent test pattern generation"),
            "",
            "üîç Accurate Verification:",
            (1, "Independent golden reference model"),
            (1, "Automatic pass/fail checking"),
            "",
            "üöÄ Industry-Standard Tools:",
            (1, "Works with iverilog, ModelSim, VCS, etc."),
            (1, "Standard Verilog output compatible with any simulator")
        ]
    )
    
    # Slide 13: Conclusion
    add_content_slide(
        prs,
        "Conclusion",
        [
            "üéâ LLM-aided Testbench Generation provides:",
            "",
            "‚úÖ Complete automation of testbench creation",
            "‚úÖ Comprehensive test coverage with minimal effort",
            "‚úÖ Golden reference models for verification",
            "‚úÖ Integration with standard simulation tools (iverilog)",
            "‚úÖ Significant time savings in hardware verification",
            "",
            "üöÄ Future Enhancements:",
            (1, "Support for sequential circuits and FSMs"),
            (1, "Waveform generation and analysis"),
            (1, "Coverage analysis and reporting"),
            (1, "Integration with formal verification tools"),
            "",
            "üìß Contact: github.com/FCHXWH823/LLM-aided-Testbench-Generation"
        ]
    )
    
    # Save the presentation
    output_file = "/home/runner/work/LLM-aided-Testbench-Generation/LLM-aided-Testbench-Generation/LLM_Aided_Testbench_Generation_Presentation.pptx"
    prs.save(output_file)
    print(f"‚úÖ Presentation created successfully: {output_file}")
    return output_file

if __name__ == "__main__":
    create_presentation()
